{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server celler server.",
        "title": "matcher API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8000",
    "basePath": "/api/v1",
    "paths": {
        "/users/": {
            "post": {
                "description": "Get all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Users",
                "parameters": [
                    {
                        "description": "GraphQL Mutation Payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.GraphQLUsersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schema.UserResolverr"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/id": {
            "post": {
                "description": "Get user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User by ID",
                "parameters": [
                    {
                        "description": "GraphQL Mutation Payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.GraphQLUserByIDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schema.UserResolverr"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Existed user login with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "GraphQL Mutation Payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.GraphQLUserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schema.UserResolverr"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/proceed-registration": {
            "post": {
                "description": "Proceed registration of user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Proceed registration",
                "parameters": [
                    {
                        "description": "GraphQL Mutation Payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.GraphQLProceedRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/store.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "New user Registeration with username, email, and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User registeration",
                "parameters": [
                    {
                        "description": "GraphQL Mutation Payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.GraphQLUserRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/store.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/reset-pass": {
            "post": {
                "description": "Reset password by user's token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Password reset",
                "parameters": [
                    {
                        "description": "GraphQL Mutation Payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.GraphQLPasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schema.UserResolverr"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/send-verification-email": {
            "post": {
                "description": "Send email verification to user by his email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Email verification",
                "parameters": [
                    {
                        "description": "GraphQL Mutation Payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.GraphQLEmailVerificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schema.UserResolverr"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/token": {
            "post": {
                "description": "Get user by token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User by Token",
                "parameters": [
                    {
                        "description": "GraphQL Mutation Payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.GraphQLUserByTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schema.UserResolverr"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/update-info": {
            "post": {
                "description": "Proceed registration of user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Proceed registration",
                "parameters": [
                    {
                        "description": "GraphQL Mutation Payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.GraphQLUpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/store.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schema.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "schema.GraphQLEmailVerificationRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "example": "mutation SendEmailVerification($input: SendEmailVerificationPayload!) { sendEmailVerification(input: $input) { email } }"
                },
                "variables": {
                    "$ref": "#/definitions/store.SendEmailVerificationPayload"
                }
            }
        },
        "schema.GraphQLPasswordResetRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "example": "mutation ResetUserPassword($input: ResetUserPassPayload!) { resetUserPassword(input: $input) { token } }"
                },
                "variables": {
                    "$ref": "#/definitions/store.ResetUserPassPayload"
                }
            }
        },
        "schema.GraphQLProceedRegistrationRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "example": "mutation ProceedRegistrationUser($input: ProceedRegistrationUserPayload!) { proceedRegistrationUser(input: $input) { first_name last_name birthday gender preferences pics location token} }"
                },
                "variables": {
                    "$ref": "#/definitions/store.ProceedRegistrationUserPayload"
                }
            }
        },
        "schema.GraphQLUpdateUserRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "example": "mutation UpdateUserInfo($input: UpdateUserInfoPayload!) { updateUserInfo(input: $input) { first_name last_name birthday gender preferences pics location token} }"
                },
                "variables": {
                    "$ref": "#/definitions/store.UpdateUserInfoPayload"
                }
            }
        },
        "schema.GraphQLUserByIDRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "example": "mutation User($input: UserByIDVariables!) { user(input: $input) { id } }"
                },
                "variables": {
                    "$ref": "#/definitions/schema.UserByIDVariables"
                }
            }
        },
        "schema.GraphQLUserByTokenRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "example": "mutation UserByToken($input: UserByTokenVariables!) { userByToken(input: $input) { token } }"
                },
                "variables": {
                    "$ref": "#/definitions/schema.UserByTokenVariables"
                }
            }
        },
        "schema.GraphQLUserLoginRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "example": "mutation LoginUser($input: LoginUserInput!) { loginUser(input: $input) { username password } }"
                },
                "variables": {
                    "$ref": "#/definitions/store.LoginUserPayload"
                }
            }
        },
        "schema.GraphQLUserRegistrationRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "example": "mutation RegisterUser($input: RegisterUserInput!) { registerUser(input: $input) { username email password } }"
                },
                "variables": {
                    "$ref": "#/definitions/schema.RegisterUserVariables"
                }
            }
        },
        "schema.GraphQLUsersRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "example": "mutation Users($input: User!) { user(input: $input) { } }"
                },
                "variables": {
                    "type": "object"
                }
            }
        },
        "schema.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "Invalid input"
                }
            }
        },
        "schema.RegisterUserVariables": {
            "type": "object",
            "properties": {
                "input": {
                    "$ref": "#/definitions/store.RegisterUserPayload"
                }
            }
        },
        "schema.UserByIDVariables": {
            "type": "object",
            "properties": {
                "ID": {
                    "type": "string"
                }
            }
        },
        "schema.UserByTokenVariables": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "schema.UserResolverr": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "securePassword123"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "store.LoginUserPayload": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "securePASSWORD123"
                },
                "username": {
                    "type": "string",
                    "example": "ms3oud"
                }
            }
        },
        "store.ProceedRegistrationUserPayload": {
            "type": "object",
            "required": [
                "birthday",
                "first_name",
                "gender",
                "last_name",
                "location",
                "pics",
                "preferences",
                "token"
            ],
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "pics": {
                    "type": "string"
                },
                "preferences": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "store.RegisterUserPayload": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "ms3oud@example.test"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 6,
                    "example": "securePASSWORD123"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "example": "ms3oud"
                }
            }
        },
        "store.ResetUserPassPayload": {
            "type": "object",
            "required": [
                "password",
                "token"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "store.SendEmailVerificationPayload": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "ms3oud@example.test"
                }
            }
        },
        "store.UpdateUserInfoPayload": {
            "type": "object",
            "required": [
                "birthday",
                "first_name",
                "last_name",
                "location",
                "pics",
                "preferences",
                "token"
            ],
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "pics": {
                    "type": "string"
                },
                "preferences": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "store.User": {
            "type": "object",
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "pics": {
                    "type": "string"
                },
                "preferences": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "matcherAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}