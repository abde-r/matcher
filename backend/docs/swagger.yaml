basePath: /api/v1
definitions:
  schema.GraphQLEmailVerificationRequest:
    properties:
      query:
        example: 'mutation SendEmailVerification($input: SendEmailVerificationPayload!)
          { sendEmailVerification(input: $input) { email } }'
        type: string
      variables:
        $ref: '#/definitions/store.SendEmailVerificationPayload'
    type: object
  schema.GraphQLPasswordResetRequest:
    properties:
      query:
        example: 'mutation ResetUserPassword($input: ResetUserPassPayload!) { resetUserPassword(input:
          $input) { token } }'
        type: string
      variables:
        $ref: '#/definitions/store.ResetUserPassPayload'
    type: object
  schema.GraphQLProceedRegistrationRequest:
    properties:
      query:
        example: 'mutation ProceedRegistrationUser($input: ProceedRegistrationUserPayload!)
          { proceedRegistrationUser(input: $input) { first_name last_name birthday
          gender preferences pics location token} }'
        type: string
      variables:
        $ref: '#/definitions/store.ProceedRegistrationUserPayload'
    type: object
  schema.GraphQLUpdateUserRequest:
    properties:
      query:
        example: 'mutation UpdateUserInfo($input: UpdateUserInfoPayload!) { updateUserInfo(input:
          $input) { first_name last_name birthday gender preferences pics location
          token} }'
        type: string
      variables:
        $ref: '#/definitions/store.UpdateUserInfoPayload'
    type: object
  schema.GraphQLUserByIDRequest:
    properties:
      query:
        example: 'mutation User($input: UserByIDVariables!) { user(input: $input)
          { id } }'
        type: string
      variables:
        $ref: '#/definitions/schema.UserByIDVariables'
    type: object
  schema.GraphQLUserByTokenRequest:
    properties:
      query:
        example: 'mutation UserByToken($input: UserByTokenVariables!) { userByToken(input:
          $input) { token } }'
        type: string
      variables:
        $ref: '#/definitions/schema.UserByTokenVariables'
    type: object
  schema.GraphQLUserLoginRequest:
    properties:
      query:
        example: 'mutation LoginUser($input: LoginUserInput!) { loginUser(input: $input)
          { username password } }'
        type: string
      variables:
        $ref: '#/definitions/store.LoginUserPayload'
    type: object
  schema.GraphQLUserRegistrationRequest:
    properties:
      query:
        example: 'mutation RegisterUser($input: RegisterUserInput!) { registerUser(input:
          $input) { username email password } }'
        type: string
      variables:
        $ref: '#/definitions/store.RegisterUserPayload'
    type: object
  schema.GraphQLUsersRequest:
    properties:
      query:
        example: 'mutation Users($input: User!) { user(input: $input) { } }'
        type: string
      variables:
        type: object
    type: object
  schema.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Invalid input
        type: string
    type: object
  schema.UserByIDVariables:
    properties:
      ID:
        type: string
    type: object
  schema.UserByTokenVariables:
    properties:
      token:
        type: string
    type: object
  store.LoginUserPayload:
    properties:
      password:
        example: securePASSWORD123
        type: string
      username:
        example: ms3oud
        type: string
    required:
    - password
    - username
    type: object
  store.ProceedRegistrationUserPayload:
    properties:
      birthday:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: boolean
      id:
        type: integer
      last_name:
        type: string
      location:
        type: string
      pics:
        type: string
      preferences:
        type: string
      token:
        type: string
      username:
        type: string
    required:
    - birthday
    - first_name
    - gender
    - last_name
    - location
    - pics
    - preferences
    - token
    type: object
  store.RegisterUserPayload:
    properties:
      email:
        example: ms3oud@example.test
        type: string
      password:
        example: securePASSWORD123
        maxLength: 20
        minLength: 6
        type: string
      token:
        type: string
      username:
        example: ms3oud
        type: string
    required:
    - email
    - password
    - username
    type: object
  store.ResetUserPassPayload:
    properties:
      password:
        type: string
      token:
        type: string
    required:
    - password
    - token
    type: object
  store.SendEmailVerificationPayload:
    properties:
      email:
        example: ms3oud@example.test
        type: string
    required:
    - email
    type: object
  store.UpdateUserInfoPayload:
    properties:
      birthday:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      location:
        type: string
      pics:
        type: string
      preferences:
        type: string
      token:
        type: string
      username:
        type: string
    required:
    - birthday
    - first_name
    - last_name
    - location
    - pics
    - preferences
    - token
    type: object
  store.User:
    properties:
      birthday:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: boolean
      id:
        type: integer
      last_name:
        type: string
      location:
        type: string
      password:
        type: string
      pics:
        type: string
      preferences:
        type: string
      token:
        type: string
      username:
        type: string
    type: object
externalDocs:
  description: matcherAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: matcher API
  version: "1.0"
paths:
  /users/:
    post:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: GraphQL Mutation Payload
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/schema.GraphQLUsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.HTTPError'
      summary: Users
      tags:
      - User
  /users/id:
    post:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: GraphQL Mutation Payload
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/schema.GraphQLUserByIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.HTTPError'
      summary: User by ID
      tags:
      - User
  /users/login:
    post:
      consumes:
      - application/json
      description: Existed user login with username and password
      parameters:
      - description: GraphQL Mutation Payload
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/schema.GraphQLUserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.HTTPError'
      summary: User login
      tags:
      - Auth
  /users/proceed-registration:
    post:
      consumes:
      - application/json
      description: Proceed registration of user
      parameters:
      - description: GraphQL Mutation Payload
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/schema.GraphQLProceedRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.HTTPError'
      summary: Proceed registration
      tags:
      - User
  /users/register:
    post:
      consumes:
      - application/json
      description: New user Registeration with username, email, and password
      parameters:
      - description: GraphQL Mutation Payload
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/schema.GraphQLUserRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.HTTPError'
      summary: User registeration
      tags:
      - Auth
  /users/reset-pass:
    post:
      consumes:
      - application/json
      description: Reset password by user's token
      parameters:
      - description: GraphQL Mutation Payload
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/schema.GraphQLPasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.HTTPError'
      summary: Password reset
      tags:
      - Auth
  /users/send-verification-email:
    post:
      consumes:
      - application/json
      description: Send email verification to user by his email
      parameters:
      - description: GraphQL Mutation Payload
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/schema.GraphQLEmailVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.HTTPError'
      summary: Email verification
      tags:
      - Auth
  /users/token:
    post:
      consumes:
      - application/json
      description: Get user by token
      parameters:
      - description: GraphQL Mutation Payload
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/schema.GraphQLUserByTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.HTTPError'
      summary: User by Token
      tags:
      - User
  /users/update-info:
    post:
      consumes:
      - application/json
      description: Proceed registration of user
      parameters:
      - description: GraphQL Mutation Payload
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/schema.GraphQLUpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.HTTPError'
      summary: Proceed registration
      tags:
      - User
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
